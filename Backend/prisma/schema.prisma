// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String
  location       String?
  profilePhoto   String?     // URL
  isPublic       Boolean     @default(true)
  availability   String[]    // Example: ["weekends", "evenings"]
  email          String      @unique
  password       String
  role           Role        @default(USER)

  skillsOffered  Skill[]     @relation("OfferedSkills")
  skillsWanted   Skill[]     @relation("WantedSkills")

  sentRequests   Swap[]      @relation("SentRequests")
  receivedRequests Swap[]    @relation("ReceivedRequests")
  
  feedbackGiven  Feedback[]  @relation("FeedbackGiven")
  feedbackReceived Feedback[] @relation("FeedbackReceived")

  banned         Boolean     @default(false)
  createdAt      DateTime    @default(now())
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String?
  usersOffering User[] @relation("OfferedSkills")
  usersWanting  User[] @relation("WantedSkills")
}

model Swap {
  id           String   @id @default(cuid())
  senderId     String
  receiverId   String
  skill        String   // Can also link to a Skill model if needed
  status       SwapStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sender       User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver     User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model Feedback {
  id         String   @id @default(cuid())
  rating     Int      // 1 to 5
  comment    String?
  fromId     String
  toId       String
  createdAt  DateTime @default(now())

  from       User     @relation("FeedbackGiven", fields: [fromId], references: [id])
  to         User     @relation("FeedbackReceived", fields: [toId], references: [id])
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}

